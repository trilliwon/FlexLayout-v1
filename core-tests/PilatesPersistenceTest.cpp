/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @Generated by gentest/gentest.rb from gentest/fixtures/PilatesPercentageTest.html

#include <gtest/gtest.h>
#include <pilates/Pilates.h>

TEST(PilatesTest, cloning_shared_root) {
  const PilatesConfigRef config = PilatesConfigNew();

  const PilatesNodeRef root = PilatesNodeNewWithConfig(config);
  PilatesNodeStyleSetWidth(root, 100);
  PilatesNodeStyleSetHeight(root, 100);

  const PilatesNodeRef root_child0 = PilatesNodeNewWithConfig(config);
  PilatesNodeStyleSetFlexGrow(root_child0, 1);
  PilatesNodeStyleSetFlexBasis(root_child0, 50);
  PilatesNodeInsertChild(root, root_child0, 0);

  const PilatesNodeRef root_child1 = PilatesNodeNewWithConfig(config);
  PilatesNodeStyleSetFlexGrow(root_child1, 1);
  PilatesNodeInsertChild(root, root_child1, 1);
  PilatesNodeCalculateLayout(root, PilatesUndefined, PilatesUndefined, PilatesDirectionLTR);

  ASSERT_FLOAT_EQ(0, PilatesNodeLayoutGetLeft(root));
  ASSERT_FLOAT_EQ(0, PilatesNodeLayoutGetTop(root));
  ASSERT_FLOAT_EQ(100, PilatesNodeLayoutGetWidth(root));
  ASSERT_FLOAT_EQ(100, PilatesNodeLayoutGetHeight(root));

  ASSERT_FLOAT_EQ(0, PilatesNodeLayoutGetLeft(root_child0));
  ASSERT_FLOAT_EQ(0, PilatesNodeLayoutGetTop(root_child0));
  ASSERT_FLOAT_EQ(100, PilatesNodeLayoutGetWidth(root_child0));
  ASSERT_FLOAT_EQ(75, PilatesNodeLayoutGetHeight(root_child0));

  ASSERT_FLOAT_EQ(0, PilatesNodeLayoutGetLeft(root_child1));
  ASSERT_FLOAT_EQ(75, PilatesNodeLayoutGetTop(root_child1));
  ASSERT_FLOAT_EQ(100, PilatesNodeLayoutGetWidth(root_child1));
  ASSERT_FLOAT_EQ(25, PilatesNodeLayoutGetHeight(root_child1));

  const PilatesNodeRef root2 = PilatesNodeClone(root);
  PilatesNodeStyleSetWidth(root2, 100);

  ASSERT_EQ(2, PilatesNodeGetChildCount(root2));
  // The children should have referential equality at this point.
  ASSERT_EQ(root_child0, PilatesNodeGetChild(root2, 0));
  ASSERT_EQ(root_child1, PilatesNodeGetChild(root2, 1));

  PilatesNodeCalculateLayout(root2, PilatesUndefined, PilatesUndefined, PilatesDirectionLTR);

  ASSERT_EQ(2, PilatesNodeGetChildCount(root2));
  // Relayout with no changed input should result in referential equality.
  ASSERT_EQ(root_child0, PilatesNodeGetChild(root2, 0));
  ASSERT_EQ(root_child1, PilatesNodeGetChild(root2, 1));

  PilatesNodeStyleSetWidth(root2, 150);
  PilatesNodeStyleSetHeight(root2, 200);
  PilatesNodeCalculateLayout(root2, PilatesUndefined, PilatesUndefined, PilatesDirectionLTR);

  ASSERT_EQ(2, PilatesNodeGetChildCount(root2));
  // Relayout with changed input should result in cloned children.
  const PilatesNodeRef root2_child0 = PilatesNodeGetChild(root2, 0);
  const PilatesNodeRef root2_child1 = PilatesNodeGetChild(root2, 1);
  ASSERT_NE(root_child0, root2_child0);
  ASSERT_NE(root_child1, root2_child1);

  // Everything in the root should remain unchanged.
  ASSERT_FLOAT_EQ(0, PilatesNodeLayoutGetLeft(root));
  ASSERT_FLOAT_EQ(0, PilatesNodeLayoutGetTop(root));
  ASSERT_FLOAT_EQ(100, PilatesNodeLayoutGetWidth(root));
  ASSERT_FLOAT_EQ(100, PilatesNodeLayoutGetHeight(root));

  ASSERT_FLOAT_EQ(0, PilatesNodeLayoutGetLeft(root_child0));
  ASSERT_FLOAT_EQ(0, PilatesNodeLayoutGetTop(root_child0));
  ASSERT_FLOAT_EQ(100, PilatesNodeLayoutGetWidth(root_child0));
  ASSERT_FLOAT_EQ(75, PilatesNodeLayoutGetHeight(root_child0));

  ASSERT_FLOAT_EQ(0, PilatesNodeLayoutGetLeft(root_child1));
  ASSERT_FLOAT_EQ(75, PilatesNodeLayoutGetTop(root_child1));
  ASSERT_FLOAT_EQ(100, PilatesNodeLayoutGetWidth(root_child1));
  ASSERT_FLOAT_EQ(25, PilatesNodeLayoutGetHeight(root_child1));

  // The new root now has new layout.
  ASSERT_FLOAT_EQ(0, PilatesNodeLayoutGetLeft(root2));
  ASSERT_FLOAT_EQ(0, PilatesNodeLayoutGetTop(root2));
  ASSERT_FLOAT_EQ(150, PilatesNodeLayoutGetWidth(root2));
  ASSERT_FLOAT_EQ(200, PilatesNodeLayoutGetHeight(root2));

  ASSERT_FLOAT_EQ(0, PilatesNodeLayoutGetLeft(root2_child0));
  ASSERT_FLOAT_EQ(0, PilatesNodeLayoutGetTop(root2_child0));
  ASSERT_FLOAT_EQ(150, PilatesNodeLayoutGetWidth(root2_child0));
  ASSERT_FLOAT_EQ(125, PilatesNodeLayoutGetHeight(root2_child0));

  ASSERT_FLOAT_EQ(0, PilatesNodeLayoutGetLeft(root2_child1));
  ASSERT_FLOAT_EQ(125, PilatesNodeLayoutGetTop(root2_child1));
  ASSERT_FLOAT_EQ(150, PilatesNodeLayoutGetWidth(root2_child1));
  ASSERT_FLOAT_EQ(75, PilatesNodeLayoutGetHeight(root2_child1));

  PilatesNodeFreeRecursive(root2);

  PilatesNodeFreeRecursive(root);

  PilatesConfigFree(config);
}

TEST(PilatesTest, mutating_children_of_a_clone_clones) {
  const PilatesConfigRef config = PilatesConfigNew();

  const PilatesNodeRef root = PilatesNodeNewWithConfig(config);
  ASSERT_EQ(0, PilatesNodeGetChildCount(root));

  const PilatesNodeRef root2 = PilatesNodeClone(root);
  ASSERT_EQ(0, PilatesNodeGetChildCount(root2));

  const PilatesNodeRef root2_child0 = PilatesNodeNewWithConfig(config);
  PilatesNodeInsertChild(root2, root2_child0, 0);

  ASSERT_EQ(0, PilatesNodeGetChildCount(root));
  ASSERT_EQ(1, PilatesNodeGetChildCount(root2));

  const PilatesNodeRef root3 = PilatesNodeClone(root2);
  ASSERT_EQ(1, PilatesNodeGetChildCount(root2));
  ASSERT_EQ(1, PilatesNodeGetChildCount(root3));
  ASSERT_EQ(PilatesNodeGetChild(root2, 0), PilatesNodeGetChild(root3, 0));

  const PilatesNodeRef root3_child1 = PilatesNodeNewWithConfig(config);
  PilatesNodeInsertChild(root3, root3_child1, 1);
  ASSERT_EQ(1, PilatesNodeGetChildCount(root2));
  ASSERT_EQ(2, PilatesNodeGetChildCount(root3));
  ASSERT_EQ(root3_child1, PilatesNodeGetChild(root3, 1));
  ASSERT_NE(PilatesNodeGetChild(root2, 0), PilatesNodeGetChild(root3, 0));

  const PilatesNodeRef root4 = PilatesNodeClone(root3);
  ASSERT_EQ(root3_child1, PilatesNodeGetChild(root4, 1));

  PilatesNodeRemoveChild(root4, root3_child1);
  ASSERT_EQ(2, PilatesNodeGetChildCount(root3));
  ASSERT_EQ(1, PilatesNodeGetChildCount(root4));
  ASSERT_NE(PilatesNodeGetChild(root3, 0), PilatesNodeGetChild(root4, 0));

  PilatesNodeFreeRecursive(root4);
  PilatesNodeFreeRecursive(root3);
  PilatesNodeFreeRecursive(root2);
  PilatesNodeFreeRecursive(root);

  PilatesConfigFree(config);
}

TEST(PilatesTest, cloning_two_levels) {
  const PilatesConfigRef config = PilatesConfigNew();

  const PilatesNodeRef root = PilatesNodeNewWithConfig(config);
  PilatesNodeStyleSetWidth(root, 100);
  PilatesNodeStyleSetHeight(root, 100);

  const PilatesNodeRef root_child0 = PilatesNodeNewWithConfig(config);
  PilatesNodeStyleSetFlexGrow(root_child0, 1);
  PilatesNodeStyleSetFlexBasis(root_child0, 15);
  PilatesNodeInsertChild(root, root_child0, 0);

  const PilatesNodeRef root_child1 = PilatesNodeNewWithConfig(config);
  PilatesNodeStyleSetFlexGrow(root_child1, 1);
  PilatesNodeInsertChild(root, root_child1, 1);

  const PilatesNodeRef root_child1_0 = PilatesNodeNewWithConfig(config);
  PilatesNodeStyleSetFlexBasis(root_child1_0, 10);
  PilatesNodeStyleSetFlexGrow(root_child1_0, 1);
  PilatesNodeInsertChild(root_child1, root_child1_0, 0);

  const PilatesNodeRef root_child1_1 = PilatesNodeNewWithConfig(config);
  PilatesNodeStyleSetFlexBasis(root_child1_1, 25);
  PilatesNodeInsertChild(root_child1, root_child1_1, 1);

  PilatesNodeCalculateLayout(root, PilatesUndefined, PilatesUndefined, PilatesDirectionLTR);

  ASSERT_FLOAT_EQ(40, PilatesNodeLayoutGetHeight(root_child0));
  ASSERT_FLOAT_EQ(60, PilatesNodeLayoutGetHeight(root_child1));
  ASSERT_FLOAT_EQ(35, PilatesNodeLayoutGetHeight(root_child1_0));
  ASSERT_FLOAT_EQ(25, PilatesNodeLayoutGetHeight(root_child1_1));

  const PilatesNodeRef root2_child0 = PilatesNodeClone(root_child0);
  const PilatesNodeRef root2_child1 = PilatesNodeClone(root_child1);
  const PilatesNodeRef root2 = PilatesNodeClone(root);

  PilatesNodeStyleSetFlexGrow(root2_child0, 0);
  PilatesNodeStyleSetFlexBasis(root2_child0, 40);

  PilatesNodeRemoveAllChildren(root2);
  PilatesNodeInsertChild(root2, root2_child0, 0);
  PilatesNodeInsertChild(root2, root2_child1, 1);
  ASSERT_EQ(2, PilatesNodeGetChildCount(root2));

  PilatesNodeCalculateLayout(root2, PilatesUndefined, PilatesUndefined, PilatesDirectionLTR);

  // Original root is unchanged
  ASSERT_FLOAT_EQ(40, PilatesNodeLayoutGetHeight(root_child0));
  ASSERT_FLOAT_EQ(60, PilatesNodeLayoutGetHeight(root_child1));
  ASSERT_FLOAT_EQ(35, PilatesNodeLayoutGetHeight(root_child1_0));
  ASSERT_FLOAT_EQ(25, PilatesNodeLayoutGetHeight(root_child1_1));

  // New root has new layout at the top
  ASSERT_FLOAT_EQ(40, PilatesNodeLayoutGetHeight(root2_child0));
  ASSERT_FLOAT_EQ(60, PilatesNodeLayoutGetHeight(root2_child1));

  // The deeper children are untouched.
  ASSERT_EQ(PilatesNodeGetChild(root2_child1, 0), root_child1_0);
  ASSERT_EQ(PilatesNodeGetChild(root2_child1, 1), root_child1_1);

  PilatesNodeFreeRecursive(root2);
  PilatesNodeFreeRecursive(root);

  PilatesConfigFree(config);
}

TEST(PilatesTest, cloning_and_freeing) {
  const int32_t initialInstanceCount = PilatesNodeGetInstanceCount();

  const PilatesConfigRef config = PilatesConfigNew();

  const PilatesNodeRef root = PilatesNodeNewWithConfig(config);
  PilatesNodeStyleSetWidth(root, 100);
  PilatesNodeStyleSetHeight(root, 100);
  const PilatesNodeRef root_child0 = PilatesNodeNewWithConfig(config);
  PilatesNodeInsertChild(root, root_child0, 0);
  const PilatesNodeRef root_child1 = PilatesNodeNewWithConfig(config);
  PilatesNodeInsertChild(root, root_child1, 1);

  PilatesNodeCalculateLayout(root, PilatesUndefined, PilatesUndefined, PilatesDirectionLTR);

  const PilatesNodeRef root2 = PilatesNodeClone(root);

  // Freeing the original root should be safe as long as we don't free its
  // children.
  PilatesNodeFree(root);

  PilatesNodeCalculateLayout(root2, PilatesUndefined, PilatesUndefined, PilatesDirectionLTR);

  PilatesNodeFreeRecursive(root2);

  PilatesNodeFree(root_child0);
  PilatesNodeFree(root_child1);

  PilatesConfigFree(config);

  ASSERT_EQ(initialInstanceCount, PilatesNodeGetInstanceCount());
}
